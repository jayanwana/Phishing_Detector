{"version":3,"file":"contentScript.c637c52c830e8c288ece.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;;AAGA;AACA;;AACA;AACA;AAAA;AAAA;AACA;;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AALA;;AAQA;AACA;AAAA;AADA;AAIA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;;;;;;;;;;AA1DA;AAqBA;AAUA;;;;;;;;;;;;;;;;ACnCA","sources":["webpack://phishing-detector/./src/pages/Content/index.js","webpack://phishing-detector/webpack/runtime/getFullHash"],"sourcesContent":["// Development backend URL\r\n// const backendURL = 'http://localhost:5000/classify'\r\n\r\n// Production backend URL\r\nconst backendURL = 'https://phishing-detector-backend-7sgvu.ondigitalocean.app/classify'\r\nconsole.log('content live')\r\n\r\n// A chrome API message listener is used to listen to messages\r\n// from the extension pop up, confirms the\r\n// command is scrapeMail and executes the functions\r\nchrome.runtime.onMessage.addListener((msg, sender, sendResponse) => {\r\n  if(msg.command === 'scrapeMail'){\r\n    try {\r\n      let mail = scrapeMail()\r\n      sendForClassification(mail, sendResponse)\r\n    } catch (e) {\r\n      sendResponse({error: 'An error occurred'})\r\n      return false\r\n    }\r\n    // Return true to keep callback function valid so async request can be made\r\n    return true\r\n  }\r\n})\r\n\r\n// Function to collect the text from the email\r\nconst scrapeMail = () => {\r\n  const email = document.querySelector(\".a3s\").innerText\r\n  if (email && typeof(email) === 'string'){\r\n    return JSON.stringify({text: email})\r\n  }\r\n  console.log('Email not found');\r\n  throw new Error('Email not found')\r\n}\r\n\r\n// sends the email to the backend for classification\r\nconst sendForClassification = (body, sendResponse) => {\r\n  // params: body (object) a json object containing the email\r\n  // sendResponse (function) callback function to recieve the response\r\n  // Compose request header\r\n  const headers = {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: body\r\n  }\r\n  // Send request to backend\r\n  fetch(backendURL, headers)\r\n  .then(response => response.json())\r\n  // Pass the response to the callback function\r\n  .then(data => {\r\n    sendResponse(data)\r\n  })\r\n  .catch( error => {\r\n    console.error(error)\r\n    sendResponse({error: 'A connection error occured'})\r\n  })\r\n}\r\n\r\nwindow.addEventListener('load', () => {\r\n    let mail = scrapeMail()\r\n    sendForClassification(mail, (res) => alert(res))\r\n})\r\n","__webpack_require__.h = () => (\"71e42107bb1ae686c92f\")"],"names":[],"sourceRoot":""}